/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2022 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.94Release
// Tag = production/akw/21.94.00-0-g0f668193
/////////////////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit.csv;

import com.garmin.fit.Field;
import com.garmin.fit.FieldBase;
import com.garmin.fit.Fit;
import com.garmin.fit.Profile;
import com.garmin.fit.util.DateTimeConverter;
import com.garmin.fit.util.SemicirclesConverter;

public class MesgCSVWriterBase {
    protected CSVWriter csv;
    protected boolean hideUnknownData = false;
    protected boolean removeExpandedFields = false;
    protected boolean printDateTimeAsISO8601 = false;
    protected boolean printSemicirclesAsDegrees = false;
    private boolean showInvalidsAsEmptyCells = false;
    private boolean printByteAsHex = false;
    private boolean enumsAsStrings = false;

    public MesgCSVWriterBase(String fileName) {
        this.csv = new CSVWriter(fileName);
    }

    public void close() {
        csv.close();
    }

    public void showInvalidsAsEmptyCells() {
        showInvalidsAsEmptyCells = true;
    }

    public void hideUnknownData() {
        hideUnknownData = true;
    }

    public void setPrintByteAsHex(boolean value) {
        printByteAsHex = value;
    }

    public void setPrintSemicirclesAsDegrees(boolean value) {
        printSemicirclesAsDegrees = value;
    }

    public void setPrintDateTimeAsISO8601(boolean value) {
        printDateTimeAsISO8601 = value;
    }

    public void enumsAsStrings() {
        enumsAsStrings = true;
    }

    public void removeExpandedFields() {
        removeExpandedFields = true;
    }

    protected String getValueString(FieldBase fieldBase, int subFieldIndex) {
        Object value = fieldBase.getValue(0, subFieldIndex);
        StringBuilder outStringBuilder = new StringBuilder();
        String out;

        Profile.Type profileType;

        try {
            // This might fail as the fieldBase could be a developer field
            Field field = (Field) fieldBase;
            profileType = field.getProfileType();
        } catch (ClassCastException e) {
            // Default to dummy ENUM type
            profileType = Profile.Type.ENUM;
        }

        for (int fieldElement = 0; fieldElement < fieldBase.getNumValues(); fieldElement++) {
            if (value != null && !(showInvalidsAsEmptyCells && value.equals(Fit.baseTypeInvalidMap.get(fieldBase.getType(subFieldIndex))))) {
                value = fieldBase.getValue(fieldElement, subFieldIndex);

                if (printByteAsHex && fieldBase.getType(subFieldIndex) == Fit.BASE_TYPE_BYTE) {
                    outStringBuilder.append(String.format("0x%02x", value));
                }
                else if (printSemicirclesAsDegrees && fieldBase.getUnits().equals("semicircles")) {
                    double degrees = SemicirclesConverter.semicirclesToDegrees(Integer.parseInt(value.toString()));
                    outStringBuilder.append(String.format("%.8f", degrees));
                }
                else if (printDateTimeAsISO8601 && profileType.name().equalsIgnoreCase("DATE_TIME")) {
                    outStringBuilder.append(DateTimeConverter.fitTimestampToISO8601((Long) value));
                }
                else if (enumsAsStrings && profileType.ordinal() > Profile.Type.BOOL.ordinal()) {
                    outStringBuilder.append(Profile.enumValueName(profileType, ((Number) value).longValue()));
                }
                else {
                    outStringBuilder.append(value.toString());
                }

                if (fieldElement != fieldBase.getNumValues() - 1) {
                    outStringBuilder.append('|');
                }

            }

        }

        out = outStringBuilder.toString();
        // Escapes embedded commas, double quotes, and newline characters
        out = out.replaceAll("\"", "\"\"");
        out = "\"" + out + "\"";
        return out;
    }

    protected String formatUnits(String units) {
        return formatUnits(units, null);
    }

    protected String formatUnits(String units, String profileType) {
        if (printSemicirclesAsDegrees && units.equalsIgnoreCase("semicircles")) {
            return "degrees";
        }
        if (printDateTimeAsISO8601 && profileType != null && profileType.equalsIgnoreCase("DATE_TIME")) {
            return "";
        }
        else {
            return units;
        }
    }
}
